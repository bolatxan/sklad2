# Создадим упрощённый фрагмент патча для app.js с новой функциональностью\npatch_app_js = '''\n// === ДОБАВЛЕНО: Переменные для склада ===\nlet currentEditingWarehouseItem = null;\n\n// === ДОБАВЛЕНО: Функции для модального окна склада ===\nfunction openWarehouseModal() {\n  document.getElementById('warehouseModal').classList.add('active');\n  document.body.style.overflow = 'hidden';\n  // Сброс формы\n  document.getElementById('warehouseForm').reset();\n  updateWarehouseCost();\n} \n\nfunction closeWarehouseModal() {\n  document.getElementById('warehouseModal').classList.remove('active');\n  document.body.style.overflow = '';\n} \n\n// === ДОБАВЛЕНО: Обновление расчёта себестоимости в тенге ===\nfunction updateWarehouseCost() {\n  const yuan = parseFloat(document.getElementById('warehouseCostYuan').value) || 0;\n  const quantity = parseInt(document.getElementById('warehouseStock').value) || 1;\n  const costTenge = yuan * appData.settings.exchangeRate * quantity;\n  document.getElementById('warehouseCostTenge').textContent = costTenge.toLocaleString() + ' ₸';\n} \n\n// === ДОБАВЛЕНО: Обработчик отправки формы склада ===\nfunction handleWarehouseSubmit(e) {\n  e.preventDefault();\n\n  const product = document.getElementById('warehouseProduct').value;\n  const size = document.getElementById('warehouseSize').value;\n  const color = document.getElementById('warehouseColor').value;\n  const stock = parseInt(document.getElementById('warehouseStock').value);\n  const costPriceYuan = parseFloat(document.getElementById('warehouseCostYuan').value);\n\n  if (!product || !size || !color || !stock || !costPriceYuan) {\n    alert('Заполните все поля формы.');\n    return;\n  }\n\n  // Проверяем, есть ли уже такой товар в складе\n  const existingItem = appData.warehouse.find(item => item.product === product && item.size === size && item.color === color);\n  if (existingItem) {\n    // Если товар есть, увеличиваем количество и обновляем себестоимость\n    existingItem.stock += stock;\n    existingItem.costPriceYuan = costPriceYuan;\n  } else {\n    // Иначе добавляем новую запись\n    appData.warehouse.push({\n      id: nextWarehouseId++,\n      product,\n      size,\n      color,\n      stock,\n      costPriceYuan: costPriceYuan\n    });\n  }\n\n  // Обновляем отображение склада и закрываем модалку\n  renderWarehouse();\n  closeWarehouseModal();\n} \n\n// === ИЗМЕНЕНО: setupEventListeners — добавлены слушатели склада ===\ndocument.getElementById('addWarehouseBtn').addEventListener('click', openWarehouseModal);\ndocument.getElementById('closeWarehouseModal').addEventListener('click', closeWarehouseModal);\ndocument.getElementById('cancelWarehouse').addEventListener('click', closeWarehouseModal);\ndocument.getElementById('warehouseForm').addEventListener('submit', handleWarehouseSubmit);\n\n// === ДОБАВЛЕНО: обновление расчёта при изменении полей формы склада ===\n['warehouseCostYuan', 'warehouseStock'].forEach(id => {\n  const el = document.getElementById(id);\n  if (el) {\n    el.addEventListener('input', updateWarehouseCost);\n  }\n});\n'''\nprint(patch_app_js[:1000])